#
#

# ibm@87439
#
# Messages in this file that are processed as "java.text.MessageFormat" patterns
# use the apostrophe and open curly brace "{" as special characters.
#
# If you are a translator, type apostrophe characters as you wish them to appear
# to the user.  The translation tools will automatically handle whether one or
# two apostrophes characters are required when the translated file is exported.
#
# If you are working with this file in a text editor, use the following rules
# for apostrophe characters:
#   - If there are inserts in the message, for example "{0}", then type two
#     apostrophe characters.
#   - If there are no inserts, then just type a single apostrophe.
#
# The following line is a special comment for automatic processing by the
# translation tools:
#
# NLS_MESSAGEFORMAT_VAR

#
# Java launcher messages

Could.not.create.JVM=Java Virtual Machine konnte nicht erstellt werden.

Thread.detach.error=Der Hauptthread konnte nicht freigegeben werden.

Option.requires.classpath=%1 erfordert die Angabe eines Klassenpfads.

No.longer.supported=Warnung: Die Option %1 wird nicht mehr unterst\u00fctzt.

Blank.-J.option=Fehler: Nach der Option -J sollte kein Leerzeichen angegeben werden.

No.application.home.found=Die Ausgangsposition der Anwendung kann nicht festgestellt werden.

Error.loading=Fehler beim Laden: %1

JNI.interfaces.not.found=Die JNI-Schnittstellen k\u00f6nnen nicht gefunden werden in: %1

No.public.JRE=Eine \u00f6ffentliche JRE f\u00fcr Release %1 wurde nicht gefunden.

JVM.not.found=Java Virtual Machine wurde nicht gefunden: %1

Path.too.long=Der Pfad ist zu lang: %1

java.error.opening.jar.file=W\u00e4hrend des Versuchs, die JAR-Datei zu \u00f6ffnen, ist ein Java-Fehler aufgetreten: %1

jar.file.not.found=Die JAR-Datei wurde nicht gefunden: %1

class.not.found=Die Java-Klasse wurde nicht gefunden: %1

class.cannot.be.loaded=Die Java-Klasse konnte nicht geladen werden: %1

No.main.method.in.class=In der Klasse ist keine Hauptmethode vorhanden: %1

No.manifest.in.jar.file=Die JAR-Datei enth\u00e4lt kein Manifest: %1

No.main.class.in.manifest=In der JAR-Datei fehlt der Manifesteintrag f\u00fcr die Hauptklasse: %1

main.not.public.in.class=Bei der Hauptmethode der Klasse handelt es sich nicht um eine \u00f6ffentliche Methode: %1

Option.value.invalid=Der JVM-Optionswert ist nicht g\u00fcltig: %1

Invalid.IBM_JAVA_OPTIONS=Ung\u00fcltige Option in IBM_JAVA_OPTIONS: %1

Invalid.service.option=Ung\u00fcltige Option -XService: %1

JVMCI025=Die Optionsdatei kann nicht ge\u00f6ffnet werden: %1

JVMCI030=Ung\u00fcltige Option in der Optionsdatei: %1

Unrecognized.option=Die JVM-Option ist ung\u00fcltig: %1

Invalid.number.of.threads=Ung\u00fcltige Anzahl an Threads: %1

Unable.to.access.jarfile=Auf die JAR-Datei %1 kann nicht zugegriffen werden.

Invalid.or.corrupt.jarfile=Ung\u00fcltige oder besch\u00e4digte JAR-Datei %1

Syntax.error.in.version.spec=Syntaxfehler in Versionsspezifikation %1

Unable.to.locate.jre.meeting.spec=JRE mit Spezifikation %1 wurde nicht gefunden.

#
# Main syntax help
#
usage=\n\
Syntax: %1 [-Optionen] Klasse [Argumente...]\n\
\           (zum Ausf\u00fchren einer Klasse)\n\
\   oder  %1 [-jar] [-Optionen] JAR-Datei [Argumente...]\n\
\           (zum Ausf\u00fchren einer JAR-Datei)\n\
\n\
Dabei gelten folgende Optionen:\n\
\    -cp -classpath <Verzeichnisse und ZIP/JAR-Dateien werden durch %2 getrennt>\n\
\              Suchpfad f\u00fcr Anwendungsklassen und -ressourcen festlegen\n\
\    -D<Name>=<Wert>\n\
\              Ein Systemmerkmal festlegen\n\
\    -verbose[:class|gc|jni]\n\
\              Ausf\u00fchrliche Ausgabe aktivieren\n\
\    -version  Produktversion drucken\n\
\    -version:<Wert>\n\
\              Ausf\u00fchrung der angegebenen Version anfordern\n\
\    -showversion  Produktversion drucken und fortfahren\n\
\    -jre-restrict-search | -no-jre-restrict-search\n\
\              private JREs des Benutzers in der Versionssuche verwenden/nicht verwenden\n\
\    -agentlib:<Bibliotheksname>[=<Optionen>]\n\
\              Native Agentenbibliothek <Bibliotheksname> laden, z. B. -agentlib:hprof\n\
\              siehe auch: -agentlib:jdwp=help und -agentlib:hprof=help\n\
\    -agentpath:<Pfadhname>[=<Optionen>]\n\
\              Native Agentenbibliothek mit vollst\u00e4ndigem Pfadnamen laden\n\
\    -javaagent:<JAR-Pfad>[=<Optionen>]\n\
\              Java-Programmiersprachenagent laden, siehe java.lang.instrument\n\
\    -? -help  Diese Hilfenachricht drucken\n\
\    -X        Hilfe f\u00fcr vom Standard abweichende Optionen drucken\n\
\    -splash:<Bildpfad>  Begr\u00fc\u00dfungsanzeige mit angegebenem Bild anzeigen\n\
\    -ea[:<Paketname>...|:<Klassenname>]\n\
\    -enableassertions[:<Paketname>...|:<Klassennname>]\n\
\              Festlegungen aktivieren\n\
\    -da[:<Paketname>...|:<Klassenname>]\n\
\    -disableassertions[:<Paketname>...|:<Klassenname>]\n\
\              Festlegungen inaktivieren\n\
\    -esa | -enablesystemassertions\n\
\              Systemfestlegungen aktivieren\n\
\    -dsa | -disablesystemassertions\n\
\              Systemfestlegungen inaktivieren\n


#
# Additional syntax help for nonstandard JVM options
# ibm@73588 added -Xpd
#
classic.xusage= \    -Xargencoding  Unicode-Escapezeichenfolgen in Argumenten zulassen\n\
\    -Xbootclasspath:<Verzeichnisse und ZIP/JAR-Dateien werden durch %2 getrennt>\n\
\          Suchpfad f\u00fcr Bootprogrammklassen und -ressourcen festlegen\n\
\    -Xbootclasspath/a:<Verzeichnisse und ZIP/JAR-Dateien werden durch %2 getrennt>\n\
\          Am Ende des Bootprogrammklassenpfads anh\u00e4ngen\n\
\    -Xbootclasspath/p:<Verzeichnisse und ZIP/JAR-Dateien werden durch %2 getrennt>\n\
\          Am Anfang des Bootprogrammklassenpfads hinzuf\u00fcgen\n\
\    -Xcheck:jni       Zus\u00e4tzliche \u00dcberpr\u00fcfungen f\u00fcr JNI-Funktionen durchf\u00fchren\n\
\    -Xcheck:nabounds  Zus\u00e4tzliche \u00dcberpr\u00fcfungen f\u00fcr JNI-Bereichsoperationen durchf\u00fchren\n\
\    -Xcomp            Alle Methoden bei der ersten Verwendung kompilieren (nur z/OS)\n\
\    -Xdisableexplicitgc Explizite GCs inaktivieren\n\
\    -Xdisablejavadump Nach Fehler Systemspeicherauszug anstelle des\nJava-Speicherauszugs verwenden\n\
\    -Xlp              Java-Heap unter Verwendung gro\u00dfer Seiten zuordnen\n                                                \    -Xgcpolicy[:optthruput]|[:optavgpause]\n\
\                      Verhalten des Garbage Collector steuern\n\
\    -Xms<Gr\u00f6\u00dfe>       Urspr\u00fcngliche Java-Heapgr\u00f6\u00dfe festlegen\n\
\    -Xmx<Gr\u00f6\u00dfe>       Maximale Java-Heapgr\u00f6\u00dfe festlegen\n\
\    -Xnoclassgc       Garbage-Collection f\u00fcr Klassen inaktivieren\n\
\    -Xcompactexplicitgc   Vollst\u00e4ndige Komprimierung in jedem erzwungenen GC (System.gc) ausf\u00fchren\n\
\    -Xnocompactexplicitgc Komprimierung nicht in jedem erzwungenen GC ausf\u00fchren\n\
\    -Xnosigcatch      JVM-Wiederherstellungscode inaktivieren\n\
\    -Xnosigchain      Verketten von Signalroutinen inaktivieren\n\
\    -Xoptionsfile=<Datei> Datei mit JVM-Optionen und -Definitionen\n\
\    -Xoss<size>       Maximale Java-Stackgr\u00f6\u00dfe f\u00fcr Threads festlegen\n\
\    -Xquickstart      Systemstartzeit verbessern durch Verschieben des Kompilierens\n\
\    -Xrs              Die Verwendung von OS Signalen reduzieren\n\
\    -Xrunhprof[:help]|[:<option>=<value>, ...]\n\
\                      Profile f\u00fcr Heap, CPU oder Monitor erstellen\n\
\    -Xrunjdwp[:help]|[:<option>=<value>, ...]\n\
\                      Debug-Bibliotheke f\u00fcr Fern-Debug\n\
\    -Xss<size>        Maximale native Stackgro\u00dfe f\u00fcr Threads\n\
\    -Xverify          Strenge Klassen\u00fcberpr\u00fcfung aller Klassenbelastungen aktivieren\n\
\    -Xverify:none     Strenge Klassen\u00fcberpr\u00fcfung inaktivieren\n\
\    -Xverify:remote   Strenge Klassen\u00fcberpr\u00fcfung aller fernen Klassenbelastungen aktivieren\n\
\    -Xdebug           Fernes Debugging aktivieren\n\
Die -X Optionen weichen vom Standard ab und k\u00f6nnen jederzeit ohne\nvorherige Ank\u00fcndigung ge\u00e4ndert werden.\n

#
# Additional syntax help for nonstandard JVM options(debug only)
#
classic.debug.xusage= \    -Xt               Bytecode-Trace (nur Debugging - JIT inaktiviert)\n\
\    -Xtm              Method-Trace (nur Debugging - JIT inaktiviert)
full.version=java full version "JRE 1.6.0 IBM Linux build pxi3260sr3-20081106_07 (SR3) "
