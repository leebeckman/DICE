#
#

# ibm@87439
# 
# Messages in this file that are processed as "java.text.MessageFormat" patterns
# use the apostrophe and open curly brace "{" as special characters.
# 
# If you are a translator, type apostrophe characters as you wish them to appear
# to the user.  The translation tools will automatically handle whether one or
# two apostrophes characters are required when the translated file is exported.
# 
# If you are working with this file in a text editor, use the following rules
# for apostrophe characters:
#   - If there are inserts in the message, for example "{0}", then type two
#     apostrophe characters.
#   - If there are no inserts, then just type a single apostrophe.
# 
# The following line is a special comment for automatic processing by the
# translation tools:
# 
# NLS_MESSAGEFORMAT_VAR

#
# Java launcher messages

Could.not.create.JVM=Could not create the Java virtual machine.

Thread.detach.error=Could not detach main thread.

Option.requires.classpath=%1 requires class path specification.

No.longer.supported=Warning: %1 option is no longer supported.

Blank.-J.option=Error: the -J option should not be followed by a space.

No.application.home.found=Cannot determine application home

Error.loading=Error loading: %1

JNI.interfaces.not.found=The JNI interfaces cannot be found in: %1

No.public.JRE=A public JRE for release %1 is not found.

JVM.not.found=The Java Virtual Machine is not found: %1

Path.too.long=The path is too long: %1

java.error.opening.jar.file=A java error occurred while attempting to open the jar file: %1

jar.file.not.found=The jar file is not found: %1

class.not.found=The java class is not found: %1

class.cannot.be.loaded=The java class could not be loaded. %1

No.main.method.in.class=There is no main method in class: %1

No.manifest.in.jar.file=The jar file does not contain a manifest: %1

No.main.class.in.manifest=The jar file is missing the manifest entry for the main class: %1

main.not.public.in.class=The main method of class is not public: %1

Option.value.invalid=The JVM option value is invalid: %1

Invalid.IBM_JAVA_OPTIONS=Invalid option in IBM_JAVA_OPTIONS: %1

Invalid.service.option=Invalid option in -XService: %1

JVMCI025=Unable to open options file: %1

JVMCI030=Invalid option in options file: %1

Unrecognized.option=The JVM option is invalid: %1

Invalid.number.of.threads=Invalid number of threads: %1

Unable.to.access.jarfile=Unable to access jarfile %1

Invalid.or.corrupt.jarfile=Invalid or corrupt jarfile %1

Syntax.error.in.version.spec=Syntax error in version specification %1

Unable.to.locate.jre.meeting.spec=Unable to locate JRE meeting specification %1

#
# Main syntax help
#
usage=\n\
Usage: %1 [-options] class [args...]\n\
\           (to execute a class)\n\
\   or  %1 [-jar] [-options] jarfile [args...]\n\
\           (to execute a jar file)\n\n\
where options include:\n\
\    -cp -classpath <directories and zip/jar files separated by %2>\n\
\              set search path for application classes and resources\n\
\    -D<name>=<value>\n\
\              set a system property\n\
\    -verbose[:class|gc|jni]\n\
\              enable verbose output\n\
\    -version  print product version\n\
\    -version:<value>\n\
\	       require the specified version to run\n\
\    -showversion  print product version and continue\n\
\    -jre-restrict-search | -no-jre-restrict-search\n\
\              include/exclude user private JREs in the version search\n\
\    -agentlib:<libname>[=<options>]\n\
\              load native agent library <libname>, e.g. -agentlib:hprof\n\
\              see also, -agentlib:jdwp=help and -agentlib:hprof=help\n\
\    -agentpath:<pathname>[=<options>]\n\
\              load native agent library by full pathname\n\
\    -javaagent:<jarpath>[=<options>]\n\
\              load Java programming language agent, see java.lang.instrument\n\
\    -? -help  print this help message\n\
\    -X        print help on non-standard options\n\
\    -splash:<imagepath>  show splash screen with specified image\n\
\    -ea[:<packagename>...|:<classname>]\n\
\    -enableassertions[:<packagename>...|:<classname>]\n\
\              enable assertions\n\
\    -da[:<packagename>...|:<classname>]\n\
\    -disableassertions[:<packagename>...|:<classname>]\n\
\              disable assertions\n\
\    -esa | -enablesystemassertions\n\
\              enable system assertions\n\
\    -dsa | -disablesystemassertions\n\
\              disable system assertions\n


#
# Additional syntax help for nonstandard JVM options
# ibm@73588 added -Xpd
#
classic.xusage= \
\    -Xargencoding     Allow Unicode escape sequences in args\n\
\    -Xbootclasspath:<directories and zip/jar files separated by %2>\n\
\                      Set search path for bootstrap classes and resources\n\
\    -Xbootclasspath/a:<directories and zip/jar files separated by %2>\n\
\                      Append to end of bootstrap class path\n\
\    -Xbootclasspath/p:<directories and zip/jar files separated by %2>\n\
\                      Prepend in front of bootstrap class path\n\
\    -Xcheck:jni       Perform additional checks for JNI functions\n\
\    -Xcheck:nabounds  Perform additional checks for JNI array operations\n\
\    -Xcomp            Compile all methods on first use (z/OS only)\n\
\    -Xdisableexplicitgc Disable explicit GCs\n\
\    -Xdisablejavadump Use system dump rather than java dump on error\n\
\    -Xlp              Try to allocate Java heap using large pages\n\
\    -Xgcpolicy[:optthruput]|[:optavgpause]\n\
\                      Control garbage collector behavior\n\
\    -Xms<size>        Set initial Java heap size\n\
\    -Xmx<size>        Set maximum Java heap size\n\
\    -Xnoclassgc       Disable class garbage collection\n\
\    -Xcompactexplicitgc   Run full compaction in every forced GC (System.gc)\n\
\    -Xnocompactexplicitgc Don't run compaction in any forced GC\n\
\    -Xnosigcatch      Disable JVM recovery code\n\
\    -Xnosigchain      Disable chaining of signal handlers\n\
\    -Xoptionsfile=<file> File containing JVM options and defines\n\
\    -Xoss<size>       Set maximum Java stack size for any thread\n\
\    -Xpd              Load the Problem Determination JRE libraries\n\
\    -Xquickstart      Improve startup time by delaying compilation\n\
\    -Xrs              Reduce the use of OS signals\n\
\    -Xrunhprof[:help]|[:<option>=<value>, ...]\n\
\                      Perform heap, cpu, or monitor profiling\n\
\    -Xrunjdwp[:help]|[:<option>=<value>, ...]\n\
\                      Load debugging libraries for remote debug\n\
\    -Xss<size>        Set maximum native stack size for any thread\n\
\    -Xverify          Enable strict class checking of all class loads\n\
\    -Xverify:none     Disable strict class checking\n\
\    -Xverify:remote   Enable strict class checking of remote class loads\n\
\    -Xdebug           Enable remote debugging\n\
The -X options are non-standard and subject to change without notice.\n

#
# Additional syntax help for nonstandard JVM options(debug only)
#
classic.debug.xusage= \
\    -Xt               Bytecode tracing (debug only, disable JIT)\n\
\    -Xtm              Method tracing (debug only, disable JIT)
full.version=java full version "JRE 1.6.0 IBM Linux build pxi3260sr3-20081106_07 (SR3) "
