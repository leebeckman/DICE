/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * AnalysisMainWindow.java
 *
 * Created on 11-Mar-2012, 10:25:14 PM
 */

package dicetrackeranalysis.graphhandling;

import com.sun.java.swing.plaf.gtk.GTKLookAndFeel;
import dicetrackeranalysis.datasourceinfo.DataSourceInfoBuilder;
import dicetrackeranalysis.graphanalysis.AccessPathAnalysis;
import dicetrackeranalysis.graphanalysis.PostcompAnalysis;
import dicetrackeranalysis.graphanalysis.PrecompAnalysis;
import dicetrackeranalysis.graphanalysis.StaticStateAnalysis;
import dicetrackeranalysis.graphanalysis.UserstateAnalysis;
import edu.uci.ics.jung.algorithms.layout.ISOMLayout;
import edu.uci.ics.jung.algorithms.layout.Layout;
import edu.uci.ics.jung.graph.Graph;
import edu.uci.ics.jung.visualization.RenderContext.DirectedEdgeArrowPredicate;
import edu.uci.ics.jung.visualization.VisualizationViewer;
import edu.uci.ics.jung.visualization.control.DefaultModalGraphMouse;
import edu.uci.ics.jung.visualization.control.ModalGraphMouse;
import edu.uci.ics.jung.visualization.decorators.ToStringLabeller;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.Paint;
import java.io.File;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.text.DefaultCaret;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import org.apache.commons.collections15.Transformer;

/**
 *
 * @author lee
 */
public class AnalysisMainWindow extends javax.swing.JFrame {

    private DataSourceInfoBuilder dsib;
    private DefaultMutableTreeNode mainTaintIDsRoot;
    private DefaultMutableTreeNode taintIDsRoot;
    private DefaultMutableTreeNode selectedTaintNode;
    public static JFrame mainWindow;
    private GraphBuilder mainGraphBuilder;

    HashMap<String, GraphBuilder> tabToBuilderMap;
    HashMap<String, VisualizationViewer<TaintNode, TaintEdge>> tabToViewerMap;
    HashMap<String, JPanel> tabToViewPanelMap;
    HashMap<String, JButton> tabToDetailsButtonMap;

    private boolean holdTaintIDSelections;
    private HashSet<DefaultMutableTreeNode> heldTaintIDSelections;

//    private Object[] selectedTaintPath;

    private enum GraphMode {
        MULTIMODE,
        MULTILIGHTMODE,
        SIMPLEMODE
    }
    private GraphMode graphMode = GraphMode.MULTILIGHTMODE;

    /** Creates new form AnalysisMainWindow */
    public AnalysisMainWindow() {
        tabToBuilderMap = new HashMap<String, GraphBuilder>();
        tabToViewerMap = new HashMap<String, VisualizationViewer<TaintNode, TaintEdge>>();
        tabToViewPanelMap = new HashMap<String, JPanel>();
        tabToDetailsButtonMap = new HashMap<String, JButton>();
        heldTaintIDSelections = new HashSet<DefaultMutableTreeNode>();

        try {
            UIManager.setLookAndFeel(new GTKLookAndFeel());
        } catch (UnsupportedLookAndFeelException ex) {
            Logger.getLogger(AnalysisMainWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
        initComponents();

        taintIDsRoot = new DefaultMutableTreeNode("All");
        taintIDTree.setModel(new DefaultTreeModel(taintIDsRoot));
        
        requestCounters.removeAllItems();
        jungViewPanel.setLayout(new FlowLayout());
        DefaultCaret caret = (DefaultCaret)analysisText.getCaret();
        caret.setUpdatePolicy(DefaultCaret.ALWAYS_UPDATE);
        this.setExtendedState(JFrame.MAXIMIZED_BOTH);
        analysisText.setTabSize(3);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        loadTracking = new javax.swing.JButton();
        fileNameField = new javax.swing.JTextField();
        treePanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        taintIDTree = new javax.swing.JTree();
        deepTaintCheckBox = new javax.swing.JCheckBox();
        holdTaintIDButton = new javax.swing.JCheckBox();
        analysisButtonsPanel = new javax.swing.JPanel();
        staticStateAnalyzeButton = new javax.swing.JButton();
        resetAnalysisButton = new javax.swing.JButton();
        cachingAnalysisButton = new javax.swing.JButton();
        userStateAnalysisButton = new javax.swing.JButton();
        aprAnalysisButton = new javax.swing.JButton();
        postcomputationAnalyzeButton = new javax.swing.JButton();
        loadSource = new javax.swing.JButton();
        sourceFileName = new javax.swing.JTextField();
        tabView = new javax.swing.JTabbedPane();
        jungViewPanel = new javax.swing.JPanel();
        analysisPanel = new javax.swing.JPanel();
        analysisScroller = new javax.swing.JScrollPane();
        analysisText = new javax.swing.JTextArea();
        analysisClearButton = new javax.swing.JButton();
        quickLoadButton = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        multiGraphButton = new javax.swing.JButton();
        multiLightGraphButton = new javax.swing.JButton();
        simpleGraphButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        requestCounters = new javax.swing.JComboBox();
        noSBCheckbox = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        loadTracking.setText("Load Tracking Log");
        loadTracking.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadTrackingActionPerformed(evt);
            }
        });

        fileNameField.setEditable(false);

        treePanel.setBorder(javax.swing.BorderFactory.createTitledBorder("TaintID Filter"));

        taintIDTree.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                taintIDTreeValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(taintIDTree);

        deepTaintCheckBox.setText("Deep");
        deepTaintCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deepTaintCheckBoxActionPerformed(evt);
            }
        });

        holdTaintIDButton.setText("Hold");
        holdTaintIDButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                holdTaintIDButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout treePanelLayout = new javax.swing.GroupLayout(treePanel);
        treePanel.setLayout(treePanelLayout);
        treePanelLayout.setHorizontalGroup(
            treePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(treePanelLayout.createSequentialGroup()
                .addComponent(deepTaintCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(holdTaintIDButton)
                .addGap(113, 113, 113))
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 312, Short.MAX_VALUE)
        );
        treePanelLayout.setVerticalGroup(
            treePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(treePanelLayout.createSequentialGroup()
                .addGroup(treePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(deepTaintCheckBox)
                    .addComponent(holdTaintIDButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 325, Short.MAX_VALUE))
        );

        analysisButtonsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Analyze"));

        staticStateAnalyzeButton.setText("Static State");
        staticStateAnalyzeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                staticStateAnalyzeButtonActionPerformed(evt);
            }
        });

        resetAnalysisButton.setText("Reset");
        resetAnalysisButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetAnalysisButtonActionPerformed(evt);
            }
        });

        cachingAnalysisButton.setText("Precomputation");
        cachingAnalysisButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cachingAnalysisButtonActionPerformed(evt);
            }
        });

        userStateAnalysisButton.setText("User State");
        userStateAnalysisButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                userStateAnalysisButtonActionPerformed(evt);
            }
        });

        aprAnalysisButton.setText("Access Path Refactor");
        aprAnalysisButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aprAnalysisButtonActionPerformed(evt);
            }
        });

        postcomputationAnalyzeButton.setText("Postcomputation");
        postcomputationAnalyzeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                postcomputationAnalyzeButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout analysisButtonsPanelLayout = new javax.swing.GroupLayout(analysisButtonsPanel);
        analysisButtonsPanel.setLayout(analysisButtonsPanelLayout);
        analysisButtonsPanelLayout.setHorizontalGroup(
            analysisButtonsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(analysisButtonsPanelLayout.createSequentialGroup()
                .addGroup(analysisButtonsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(analysisButtonsPanelLayout.createSequentialGroup()
                        .addComponent(resetAnalysisButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(staticStateAnalyzeButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cachingAnalysisButton))
                    .addGroup(analysisButtonsPanelLayout.createSequentialGroup()
                        .addComponent(postcomputationAnalyzeButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(userStateAnalysisButton))
                    .addComponent(aprAnalysisButton))
                .addContainerGap(33, Short.MAX_VALUE))
        );
        analysisButtonsPanelLayout.setVerticalGroup(
            analysisButtonsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(analysisButtonsPanelLayout.createSequentialGroup()
                .addGroup(analysisButtonsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(staticStateAnalyzeButton)
                    .addComponent(resetAnalysisButton)
                    .addComponent(cachingAnalysisButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(analysisButtonsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(postcomputationAnalyzeButton)
                    .addComponent(userStateAnalysisButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(aprAnalysisButton)
                .addContainerGap(13, Short.MAX_VALUE))
        );

        loadSource.setText("Load Source Info");
        loadSource.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadSourceActionPerformed(evt);
            }
        });

        sourceFileName.setEditable(false);

        tabView.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                tabViewStateChanged(evt);
            }
        });

        jungViewPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("JUNG View"));

        javax.swing.GroupLayout jungViewPanelLayout = new javax.swing.GroupLayout(jungViewPanel);
        jungViewPanel.setLayout(jungViewPanelLayout);
        jungViewPanelLayout.setHorizontalGroup(
            jungViewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 872, Short.MAX_VALUE)
        );
        jungViewPanelLayout.setVerticalGroup(
            jungViewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 490, Short.MAX_VALUE)
        );

        tabView.addTab("Graph", jungViewPanel);

        analysisPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Analysis"));

        analysisText.setColumns(20);
        analysisText.setRows(5);
        analysisScroller.setViewportView(analysisText);

        analysisClearButton.setText("Clear");
        analysisClearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                analysisClearButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout analysisPanelLayout = new javax.swing.GroupLayout(analysisPanel);
        analysisPanel.setLayout(analysisPanelLayout);
        analysisPanelLayout.setHorizontalGroup(
            analysisPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, analysisPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(analysisClearButton))
            .addComponent(analysisScroller, javax.swing.GroupLayout.DEFAULT_SIZE, 872, Short.MAX_VALUE)
        );
        analysisPanelLayout.setVerticalGroup(
            analysisPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, analysisPanelLayout.createSequentialGroup()
                .addComponent(analysisScroller, javax.swing.GroupLayout.DEFAULT_SIZE, 454, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(analysisClearButton))
        );

        tabView.addTab("Analysis", analysisPanel);

        quickLoadButton.setText("Quick Load");
        quickLoadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quickLoadButtonActionPerformed(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Graph View / Request Filter"));

        multiGraphButton.setText("Multi");
        multiGraphButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                multiGraphButtonActionPerformed(evt);
            }
        });

        multiLightGraphButton.setText("Multi-Light");
        multiLightGraphButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                multiLightGraphButtonActionPerformed(evt);
            }
        });

        simpleGraphButton.setText("Simple");
        simpleGraphButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                simpleGraphButtonActionPerformed(evt);
            }
        });

        jLabel1.setText("Request:");

        requestCounters.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        requestCounters.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                requestCountersActionPerformed(evt);
            }
        });

        noSBCheckbox.setText("No SB");
        noSBCheckbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                noSBCheckboxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(multiGraphButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(multiLightGraphButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(simpleGraphButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(noSBCheckbox))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(requestCounters, 0, 227, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(multiGraphButton)
                    .addComponent(multiLightGraphButton)
                    .addComponent(simpleGraphButton)
                    .addComponent(noSBCheckbox))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(requestCounters, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(loadSource, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(loadTracking, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(fileNameField, javax.swing.GroupLayout.DEFAULT_SIZE, 635, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(quickLoadButton))
                            .addComponent(sourceFileName, javax.swing.GroupLayout.DEFAULT_SIZE, 730, Short.MAX_VALUE))
                        .addGap(12, 12, 12))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(tabView, javax.swing.GroupLayout.DEFAULT_SIZE, 892, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(treePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(analysisButtonsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(analysisButtonsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(treePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(loadTracking)
                            .addComponent(fileNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(quickLoadButton))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(loadSource)
                            .addComponent(sourceFileName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tabView, javax.swing.GroupLayout.DEFAULT_SIZE, 555, Short.MAX_VALUE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void addRequestCounter(String requestCounter) {
        this.requestCounters.addItem(requestCounter);
    }

//    private void addTaintID(String taintID) {
//        this.taintIDs.addItem(taintID);
//    }

    private void resetRequestCounters() {
        requestCounters.removeAllItems();
        requestCounters.revalidate();
        requestCounters.repaint();
    }

    private void resetTaintIDs() {
        taintIDsRoot.removeAllChildren();
        taintIDTree.removeAll();
        taintIDTree.revalidate();
        taintIDTree.repaint();
    }

    private void loadTrackingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadTrackingActionPerformed
        JFileChooser chooser = new JFileChooser();
        int returnVal = chooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            resetAnalysisGraphs();
            File file = chooser.getSelectedFile();
            loadTrackingFile(file);

        } else {
            System.out.println("File access cancelled by user.");
        }
    }//GEN-LAST:event_loadTrackingActionPerformed

    private void loadTrackingFile(File file) {
        tabView.setSelectedIndex(0);
        fileNameField.setText(file.getAbsolutePath());

        GraphBuilder gb = new GraphBuilder(file);

        regenerateGraphFilters(gb, true);

        Graph<TaintNode, TaintEdge> graph = gb.getLightMultiGraph();
        VisualizationViewer<TaintNode, TaintEdge> vv = getVisualizationViewer(graph, 0);

        mainGraphBuilder = gb;

        tabToBuilderMap.clear();
        tabToViewerMap.clear();
        tabToViewPanelMap.clear();
        
        tabToBuilderMap.put("Graph", gb);
        tabToViewPanelMap.put("Graph", jungViewPanel);
        tabToViewerMap.put("Graph", vv);

        redrawGraph();
//        jungViewPanel.removeAll();
//        jungViewPanel.add(vv);
//        jungViewPanel.validate();
//        jungViewPanel.repaint();
    }

    public void regenerateGraphFilters(GraphBuilder gb) {
        regenerateGraphFilters(gb, false);
    }

    public void regenerateGraphFilters(GraphBuilder gb, boolean main) {
        resetRequestCounters();
        resetTaintIDs();
        requestCounters.addItem(null);
        for (RequestCounterURIPair item : gb.getRequestCounters().values()) {
            requestCounters.addItem(item);
        }

        LinkedHashSet<String> taintIDList = gb.getTaintIDs();
        HashMap<String, DefaultMutableTreeNode> propagationMap = new HashMap<String, DefaultMutableTreeNode>();
        for (TaintIDPropagationPair propagation : gb.getTaintIDPropagations()) {
            // Get all taintIDs IN ORDER
            // If you haven't seen one yet, add it at root level
            /*
             * Have a map of id -> treenode
             * go through propagations and add appropriately
             */
            DefaultMutableTreeNode sourceNode = propagationMap.get(propagation.getSourceID());
            DefaultMutableTreeNode destNode = propagationMap.get(propagation.getDestID());

            if (sourceNode == null) {
                sourceNode = new DefaultMutableTreeNode(new TaintIDTreeNode(propagation.getSourceID(), propagation.getSourceValue()));
                propagationMap.put(propagation.getSourceID(), sourceNode);
                taintIDsRoot.add(sourceNode);
                taintIDList.remove(propagation.getSourceID());
                if (destNode == null) {
                    destNode = new DefaultMutableTreeNode(new TaintIDTreeNode(propagation.getDestID(), propagation.getDestValue()));
                    propagationMap.put(propagation.getDestID(), destNode);
                    sourceNode.add(destNode);
                    taintIDList.remove(propagation.getDestID());
                }
            }
            else if (destNode == null) {
                destNode = new DefaultMutableTreeNode(new TaintIDTreeNode(propagation.getDestID(), propagation.getDestValue()));
                propagationMap.put(propagation.getDestID(), destNode);
                sourceNode.add(destNode);
                taintIDList.remove(propagation.getDestID());
            }
            else if (propagation.isPostProcessed()) { // Both nodes have been added to tree, this is probably one of the post-processed composition propagations
                DefaultMutableTreeNode newDestNode = (DefaultMutableTreeNode)destNode.clone();
                cloneTree(destNode, newDestNode);

                sourceNode.add(newDestNode);
            }
        }
        for (String taintID : taintIDList) {
            if (taintID != null && !taintID.isEmpty()) {
                DefaultMutableTreeNode sourceNode = new DefaultMutableTreeNode(new TaintIDTreeNode(taintID, null));
                taintIDsRoot.add(sourceNode);
            }
        }

        ((DefaultTreeModel)taintIDTree.getModel()).setRoot(taintIDsRoot);

        if (main) {
            mainTaintIDsRoot = (DefaultMutableTreeNode)taintIDsRoot.clone();
            cloneTree(taintIDsRoot, mainTaintIDsRoot);
        }
    }

    private void cloneTree(DefaultMutableTreeNode sourceRoot, DefaultMutableTreeNode destRoot) {
        for (int i = 0; i < sourceRoot.getChildCount(); i++) {
            DefaultMutableTreeNode sourceChild = (DefaultMutableTreeNode)sourceRoot.getChildAt(i);
            DefaultMutableTreeNode destChild = (DefaultMutableTreeNode)sourceChild.clone();
            destRoot.add(destChild);

            cloneTree(sourceChild, destChild);
        }
    }

    public void addAnalysisGraphBuilder(GraphBuilder analysisGraphBuilder, String tabName, String analysisText) {
        JPanel analysisGraphPanel = new javax.swing.JPanel();
        analysisGraphPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("JUNG View"));
        tabView.addTab(tabName, analysisGraphPanel);
        analysisGraphPanel.setLayout(new FlowLayout());

        tabToViewPanelMap.put(tabName, analysisGraphPanel);
        tabToBuilderMap.put(tabName, analysisGraphBuilder);

        VisualizationViewer<TaintNode, TaintEdge> newViewer = getVisualizationViewer(analysisGraphBuilder.getLightMultiGraph(), 60);
        if (newViewer != null) {
            tabToViewerMap.put(tabName, newViewer);
//            analysisGraphPanel.removeAll();

            JButton detailsButton = new JButton("Details");
            final String analysisTextArg = analysisText;
            detailsButton.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    TextFrame.showText(analysisTextArg);
                }
            });
            tabToDetailsButtonMap.put(tabName, detailsButton);
//            analysisGraphPanel.add(detailsButton, FlowLayout.LEFT);
//            analysisGraphPanel.add(newViewer);

//            analysisGraphPanel.validate();
//            analysisGraphPanel.repaint();
        }
    }

    private void resetAnalysisGraphs() {
        if (mainGraphBuilder != null) {
            for (TaintNode node : mainGraphBuilder.getMultiGraph().getVertices()) {
                node.colorValue = 0;
            }
        }
        while (tabView.getTabCount() > 2) {
            tabView.removeTabAt(2);
        }
    }

    private VisualizationViewer<TaintNode, TaintEdge> getVisualizationViewer(Graph<TaintNode, TaintEdge> g, int extraRoom) {
        if (g.getEdgeCount() < 1)
            return null;
        
        DirectedEdgeArrowPredicate<TaintNode, TaintEdge> arrowPred = new DirectedEdgeArrowPredicate<TaintNode, TaintEdge>();

        Layout<TaintNode, TaintEdge> layout = new ISOMLayout<TaintNode, TaintEdge>(g);
        layout.setSize(new Dimension(jungViewPanel.getWidth(), jungViewPanel.getHeight() - extraRoom));

        VisualizationViewer<TaintNode, TaintEdge> vs = new VisualizationViewer<TaintNode, TaintEdge>(layout);
        vs.setPreferredSize(new Dimension(jungViewPanel.getWidth(), jungViewPanel.getHeight() - extraRoom));
        vs.getRenderContext().setVertexLabelTransformer(new ToStringLabeller());
        vs.getRenderContext().setEdgeLabelTransformer(new ToStringLabeller());
//                vs.getRenderContext().setEdgeArrowTransformer(edgeArrowTransformer);
        vs.getRenderContext().setEdgeArrowPredicate(arrowPred);
        Transformer<TaintNode, Paint> vertexPaint = new Transformer<TaintNode, Paint>() {
            private final Color[] palette = {Color.BLUE, Color.GREEN, Color.RED, Color.ORANGE};

            public Paint transform(TaintNode node) {
                return palette[node.colorValue];
            }
        };
        vs.getRenderContext().setVertexFillPaintTransformer(vertexPaint);

        DefaultModalGraphMouse gm = new DefaultModalGraphMouse();
        gm.setMode(ModalGraphMouse.Mode.TRANSFORMING);
        vs.addKeyListener(gm.getModeKeyListener());
        vs.setGraphMouse(gm);

        return vs;
    }

    private void redrawGraph() {
        if (tabView.getTitleAt(tabView.getSelectedIndex()).equals("Analysis"))
            return;

        GraphBuilder gb = tabToBuilderMap.get(tabView.getTitleAt(tabView.getSelectedIndex()));
        VisualizationViewer<TaintNode, TaintEdge> vv = tabToViewerMap.get(tabView.getTitleAt(tabView.getSelectedIndex()));
        JPanel viewPanel = tabToViewPanelMap.get(tabView.getTitleAt(tabView.getSelectedIndex()));

        if (gb == null)
            return;

        LinkedList<EdgeFilter> filters = null;
        Object selectedReq = requestCounters.getSelectedItem();
        if (selectedReq != null && !selectedReq.toString().isEmpty()) {
            if (selectedReq instanceof RequestCounterURIPair) {
                filters = new LinkedList<EdgeFilter>();
                filters.add(new FilterByRequestCounter(((RequestCounterURIPair)selectedReq).getRequestCounter()));
            }
        }
        if (selectedTaintNode != null && selectedTaintNode.getUserObject() instanceof TaintIDTreeNode) {
            if (filters == null)
                filters = new LinkedList<EdgeFilter>();
            HashSet<String> taintIDs = new HashSet<String>();
            if (holdTaintIDSelections) {
                for (DefaultMutableTreeNode heldTaintNode : heldTaintIDSelections) {
                    TaintIDTreeNode taintNode = (TaintIDTreeNode) heldTaintNode.getUserObject();
                    if (deepTaintCheckBox.isSelected()) {
                        taintIDs.add(taintNode.getTaintID());
                        Enumeration<DefaultMutableTreeNode> childNodes = heldTaintNode.depthFirstEnumeration();
                        while (childNodes.hasMoreElements()) {
                            DefaultMutableTreeNode childNode = childNodes.nextElement();
                            taintIDs.add(((TaintIDTreeNode)childNode.getUserObject()).getTaintID());
                        }
                    }
                    else {
                        taintIDs.add(taintNode.getTaintID());
                    }
                }
            }
            else {
                TaintIDTreeNode taintNode = (TaintIDTreeNode) selectedTaintNode.getUserObject();
                if (deepTaintCheckBox.isSelected()) {
                    taintIDs.add(taintNode.getTaintID());
                    Enumeration<DefaultMutableTreeNode> childNodes = selectedTaintNode.depthFirstEnumeration();
                    while (childNodes.hasMoreElements()) {
                        DefaultMutableTreeNode childNode = childNodes.nextElement();
                        taintIDs.add(((TaintIDTreeNode)childNode.getUserObject()).getTaintID());
                    }
                }
                else {
                    taintIDs.add(taintNode.getTaintID());
                }
            }
            filters.add(new FilterByTaintID(taintIDs));
        }

        JButton detailsButton = tabToDetailsButtonMap.get(tabView.getTitleAt(tabView.getSelectedIndex()));
        int offset = 0;
        if (detailsButton != null)
            offset = 60;

        Graph<TaintNode, TaintEdge> graph = null;
        if (graphMode == GraphMode.MULTILIGHTMODE) {
            graph = gb.getLightMultiGraph(filters);
        }
        else if(graphMode == GraphMode.MULTIMODE) {
            graph = gb.getMultiGraph(filters);
        }
        else if (graphMode == GraphMode.SIMPLEMODE) {
            graph = gb.getGraph(filters);
        }
        
        if (noSBCheckbox.isSelected()) {
            LinkedList<TaintNode> nodes = new LinkedList<TaintNode>(graph.getVertices());
            for (TaintNode node : nodes) {
                if (node.toString().startsWith("java.lang.StringBuilder:toString") ||
                        node.toString().startsWith("java.lang.StringBuilder:append"))
                    graph.removeVertex(node);
            }
        }
        vv = getVisualizationViewer(graph, offset);

        viewPanel.removeAll();

        if (vv != null)
            viewPanel.add(vv);
        if (detailsButton != null)
            viewPanel.add(detailsButton);
        
        viewPanel.validate();
        viewPanel.repaint();
    }
    
    private void requestCountersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_requestCountersActionPerformed
        redrawGraph();
    }//GEN-LAST:event_requestCountersActionPerformed

    private void multiGraphButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_multiGraphButtonActionPerformed
        graphMode = GraphMode.MULTIMODE;
        redrawGraph();
    }//GEN-LAST:event_multiGraphButtonActionPerformed

    private void multiLightGraphButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_multiLightGraphButtonActionPerformed
        graphMode = GraphMode.MULTILIGHTMODE;
        redrawGraph();
    }//GEN-LAST:event_multiLightGraphButtonActionPerformed

    private void simpleGraphButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_simpleGraphButtonActionPerformed
        graphMode = GraphMode.SIMPLEMODE;
        redrawGraph();
    }//GEN-LAST:event_simpleGraphButtonActionPerformed

    private void taintIDTreeValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_taintIDTreeValueChanged
        if (evt.getNewLeadSelectionPath().getLastPathComponent() instanceof DefaultMutableTreeNode) {
            selectedTaintNode = (DefaultMutableTreeNode) evt.getNewLeadSelectionPath().getLastPathComponent();
            if (holdTaintIDSelections) {
                heldTaintIDSelections.add(selectedTaintNode);
            }
        }
        else {
            selectedTaintNode = null;
        }
        redrawGraph();
    }//GEN-LAST:event_taintIDTreeValueChanged

    private void deepTaintCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deepTaintCheckBoxActionPerformed
        redrawGraph();
    }//GEN-LAST:event_deepTaintCheckBoxActionPerformed

    private void staticStateAnalyzeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_staticStateAnalyzeButtonActionPerformed
        resetAnalysisGraphs();
        StaticStateAnalysis analysis = new StaticStateAnalysis(mainGraphBuilder, this, analysisText);
        analysis.analyze();
    }//GEN-LAST:event_staticStateAnalyzeButtonActionPerformed

    private void resetAnalysisButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetAnalysisButtonActionPerformed
        resetAnalysisGraphs();
    }//GEN-LAST:event_resetAnalysisButtonActionPerformed

    private void loadSourceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadSourceActionPerformed
        JFileChooser chooser = new JFileChooser();
        int returnVal = chooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = chooser.getSelectedFile();
            
            loadSourceFile(file);
        } else {
            System.out.println("File access cancelled by user.");
        }
    }//GEN-LAST:event_loadSourceActionPerformed

    private void loadSourceFile(File file) {
        sourceFileName.setText(file.getAbsolutePath());

        dsib = new DataSourceInfoBuilder(file);
    }

    private void postcomputationAnalyzeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_postcomputationAnalyzeButtonActionPerformed
        resetAnalysisGraphs();
        PostcompAnalysis analysis = new PostcompAnalysis(mainGraphBuilder, dsib, analysisText, mainTaintIDsRoot, this);
        analysis.analyze();
    }//GEN-LAST:event_postcomputationAnalyzeButtonActionPerformed

    private void cachingAnalysisButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cachingAnalysisButtonActionPerformed
        resetAnalysisGraphs();
        PrecompAnalysis analysis = new PrecompAnalysis(mainGraphBuilder, dsib, analysisText, this);
        analysis.analyze();
    }//GEN-LAST:event_cachingAnalysisButtonActionPerformed

    private void analysisClearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_analysisClearButtonActionPerformed
        analysisText.setText("");
    }//GEN-LAST:event_analysisClearButtonActionPerformed

    private void quickLoadButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quickLoadButtonActionPerformed
        File trackerFile = new File("/home/lee/DICE/full.xml");
        File sourceFile = new File("/home/lee/DICE/rubisDataInfo.xml");

        loadTrackingFile(trackerFile);
        loadSourceFile(sourceFile);
    }//GEN-LAST:event_quickLoadButtonActionPerformed

    private void aprAnalysisButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aprAnalysisButtonActionPerformed
        resetAnalysisGraphs();
        AccessPathAnalysis analysis = new AccessPathAnalysis(mainGraphBuilder, dsib, analysisText, mainTaintIDsRoot, this, "edu.rice");
    }//GEN-LAST:event_aprAnalysisButtonActionPerformed

    private void tabViewStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_tabViewStateChanged
        GraphBuilder changedBuilder = tabToBuilderMap.get(tabView.getTitleAt(tabView.getSelectedIndex()));
        if (changedBuilder != null)
            regenerateGraphFilters(changedBuilder);
        redrawGraph();
    }//GEN-LAST:event_tabViewStateChanged

    private void holdTaintIDButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_holdTaintIDButtonActionPerformed
        heldTaintIDSelections.clear();
        holdTaintIDSelections = holdTaintIDButton.isSelected();
        redrawGraph();
    }//GEN-LAST:event_holdTaintIDButtonActionPerformed

    private void userStateAnalysisButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_userStateAnalysisButtonActionPerformed
        resetAnalysisGraphs();
        UserstateAnalysis analysis = new UserstateAnalysis(mainGraphBuilder, this, analysisText);
        analysis.analyze();
    }//GEN-LAST:event_userStateAnalysisButtonActionPerformed

    private void noSBCheckboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_noSBCheckboxActionPerformed
        redrawGraph();
    }//GEN-LAST:event_noSBCheckboxActionPerformed

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                AnalysisMainWindow.mainWindow = new AnalysisMainWindow();
                AnalysisMainWindow.mainWindow.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel analysisButtonsPanel;
    private javax.swing.JButton analysisClearButton;
    private javax.swing.JPanel analysisPanel;
    private javax.swing.JScrollPane analysisScroller;
    private javax.swing.JTextArea analysisText;
    private javax.swing.JButton aprAnalysisButton;
    private javax.swing.JButton cachingAnalysisButton;
    private javax.swing.JCheckBox deepTaintCheckBox;
    private javax.swing.JTextField fileNameField;
    private javax.swing.JCheckBox holdTaintIDButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel jungViewPanel;
    private javax.swing.JButton loadSource;
    private javax.swing.JButton loadTracking;
    private javax.swing.JButton multiGraphButton;
    private javax.swing.JButton multiLightGraphButton;
    private javax.swing.JCheckBox noSBCheckbox;
    private javax.swing.JButton postcomputationAnalyzeButton;
    private javax.swing.JButton quickLoadButton;
    private javax.swing.JComboBox requestCounters;
    private javax.swing.JButton resetAnalysisButton;
    private javax.swing.JButton simpleGraphButton;
    private javax.swing.JTextField sourceFileName;
    private javax.swing.JButton staticStateAnalyzeButton;
    private javax.swing.JTabbedPane tabView;
    private javax.swing.JTree taintIDTree;
    private javax.swing.JPanel treePanel;
    private javax.swing.JButton userStateAnalysisButton;
    // End of variables declaration//GEN-END:variables

}
