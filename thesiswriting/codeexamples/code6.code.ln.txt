1:	/* Given an edge to start from, Edge, work forwards through
2:	 * Graph (to edges which could be influenced by the Edge and
3:	 * so on, using the ContextID to ensure that edges are in the
4:	 * same thread of execution). Return true if the taint ID for
5:	 * TargetTaintedObject can be found at the top level for edges
6:	 * reached from the original Edge. By the top level, we mean 
7:	 * the actual arguments and return values as opposed to tainted
8:	 * objects which are merely reachable from them. Objects have 
9:	 * an isMarked flag to prevent redundant work. In the real
10:	 * algorithm used, there is more checking of this than is
11:	 * indicated here to aggressively avoid redundant graph
12:	 * traversals.
13:	 */	
14:	function forwardSearch(Edge, Graph, TargetTaintedObject):
15:		if (Edge already visited):
16:			return false
17:		
18:		foreach TaintedObject in Edge.getTaintedObjects():
19:			if (TaintedObject.getTaintID() == TargetTaintedObject.getTaintID())
20:				return true
21:			foreach SubTaintedObject in TaintedObject.getSubTaintedObjects():
22:				if (SubTaintedObject.getTaintID() == TargetTaintedObject.getTaintID()):
23:					if (SubTaintedObject.isMarked()):
24:						if (SubTaintedObject.isUnused()):
25:							return false
26:						else
27:							return true
28:							
29:		found = false;
30:		foreach NextEdge in Graph.getNextEdges(Edge):
31:			if (Edge.getContextID() == NextEdge.getContextID()):
32:				if (forwardSearch(NextEdge, Graph, TargetTaintedObject)):
33:					found = true
34:					break
35:		
36:		return found
37:	
38:	TG = taint trace graph, each node is a function or data source,
39:	   each edge is an event where tainted data is passed between nodes
40:	
41:	/* Look at every SubTaintedObject. This means objects not directly passed as
42:	 * arguments or return values, but those which are reachable from such. The
43:	 * assumption is that if taint is passed in this form and subsequently never
44:	 * found to be passed directly at the level of an argument or return value, 
45:	 * it is never accessed and the user should be informed of this.
46:	 */   
47:	foreach Edge in TG.getSortedEdges():
48:		foreach TaintedObject in Edge.getTaintedObjects():
49:			foreach SubTaintedObject in TaintedObject.getSubTaintedObjects():
50:				if (forwardSearch(Edge, TG, SubTaintedObject)):
51:					SubTaintedObject.setUnused()
52:					SubTaintedObject.setMarked()
53:					colorEdge(Edge)
54:					
55:	showGraphToUser(TG)	
