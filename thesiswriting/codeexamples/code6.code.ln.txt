1: // EXECUTION START
2: TG = taint trace graph
3: 
4: /* Look at every SubTaintedObject. These are objects not 
5:  * directly passed as arguments or return values, but 
6:  * rather those which are reachable from such. If taint is 
7:  * passed in this form and subsequently never found to be 
8:  * passed directly at the level of an argument or return 
9:  * value, it is never accessed and the user should be 
10: * informed of this. */   
11: foreach Edge in TG.getSortedEdges():
12:   foreach TaintedObject in Edge.getTaintedObjects():
13:     foreach SubTaintedObject in TaintedObject.
14:                               getSubTaintedObjects():
15:       if (forwardSearch(Edge, TG, SubTaintedObject)):
16:         SubTaintedObject.setUnused()
17:         colorEdge(Edge)
18:         
19: showGraphToUser(TG)
20: 
21: // HELPER METHODS
22: /* @Edge: An edge in @Graph to start the searching from
23:  * @Graph: A taint trace graph
24:  * @TargetTaintedObject: A tainted object with a taint ID
25:  *  to search for
26:  * @Return: True if by working forwards from @Edge in 
27:  *  @Graph (to edges which could be influenced by @Edge
28:  *  and so on, recursively, using edge context information
29:  *  to ensure that considered edges were in the same 
30:  *  thread of execution), an edge can be found with the 
31:  *  taintID for @TargetTaintedObject in the top level. Top
32:  *  level means actual arguments and return values as 
33:  *  opposed to tainted objects which are merely reachable 
34:  *  from them. */  
35: function forwardSearch(Edge, Graph, TargetTaintedObject)