1:	// HELPER METHODS
2:	/* Given a path which starts with a single Edge representing a read 
3:	 * from persistent data, this recursively attempts to grow the path
4:	 * using FlowGraph. If the path can be found in the flow graphs for
5:	 * other requests (accessible in OtherRequestIDsToEdgeMap), it initially 
6:	 * passes, but if these requests serve data to other users, the path
7:	 * represents data shared by multiple users and is abandoned. */
8:	function findUserState(UserStateEdges, Path, FlowGraph, OtherFlows):
9:	
10:	/* Construct a map: 
11:	 * {PersistentTaintID -> {RequestID -> {StartEdge -> FlowSubGraph}}}
12:	 * This map shows, for each persistent taint ID, which request graphs 
13:	 * carry that taint, what are the earliest edges carrying that taint,
14:	 * and where does each bit of persistent taint flows from these points 
15:	 * of origination. */
16:	function getMasterMap(PersistentTaintIDs, RequestSubGraphs):
17:	
18:	// EXECUTION START
19:	TG = taint trace graph
20:	
21:	RequestSubGraphs = getRequestSubGraphs(TG)
22:	PersistentTaintIDs = As in earlier pseudocode
23:	
24:	Remove from PersistentTaintIDs any IDs which were derived
25:	from others. This saves work later.
26:	
27:	MasterMap = getMasterMap(PersistentTaintIDs, RequestSubGraphs)
28:	
29:	foreach PersistentTaintID in MasterMap.keys():
30:	    RequestIDToEdgeMap = MasterMap.get(PersistentTaintID)
31:	    foreach RequestID in RequestIDToEdgeMap.keys():
32:	        StartEdgeToFlowGraphMap = RequestIDToEdgeMap.get(RequestID) 
33:	        foreach StartEdge in StartEdgeToFlowGraphMap.keys():
34:	            FlowGraph = StartEdgeToFlowGraphMap.get(StartEdge)
35:	            /* This map is needed to compare the flow of taint in one
36:	             * request with the flow of the same taint in other requests. */
37:	            OtherFlows = RequestIDToEdgeMap.copy()
38:	            OtherFlows.remove(RequestID)
39:	            
40:	            UserStateEdges = {}
41:	            findUserState(UserStateEdges, {StartEdge}, FlowGraph, OtherFlows)
42:	            
43:	            if (UserStateEdges != {}):
44:	                colorEdge(StartEdge)
45:	                showGraphToUser(createGraphFromEdges(UserStateEdges))    
