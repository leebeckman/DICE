// EXECUTION START
TG = taint trace graph
ByRequestTaintIDs = {}
/* Taint IDs which occur in multiple requests */
PersistentTaintIDs = {}

foreach RequestSG in RequestSubGraphs:
  ByRequestTaintIDs.add(getTaintIDSet(RequestSG))
  
/* Find any taint IDs which where present in multiple 
 * Request Graphs. Such data had persisted beyond a single
 * request, and we call such taint IDs persistent. */
for (i = 0; i < ByRequestTaintIDs.size(); i+=1):
  for (j = i+1; j < ByRequestTaintIDs.size(); j+=1):
    SetA = ByRequestTaintIDs[i]
    SetB = ByRequestTaintIDs[j]
    PersistentTaintIDs.add(SetA intersect SetB)

foreach PersistenTaintID in PersistentTaintIDs:
  foreach Edge in TG.getSortedEdges():
    if (edge.getAllTaintIDs().contains(PersistentTaintID)):
	  /* Color any edges which carry persistent data */
      colorEdgeRed(edge)
      if (LastRequestID != null AND Edge.getRequestID() 
	       != LastRequestID)
		/* Find points where request ID changes to find
		 * places where persistent data is stored. Color
		 * these differently */
        colorEdgeGreen(edge)
      LastRequestID = Edge.getRequestID()
      
showGraphToUser(TG)

// HELPER METHODS
/* @Graph: A taint trace graph
 * @Return: The set of taint IDs present amongst the edges
 *  in @Graph */
function getTaintIDSet(Graph)

/* See earlier psuedocode example */
RequestSubGraphs = getRequestSubGraphs(TG)